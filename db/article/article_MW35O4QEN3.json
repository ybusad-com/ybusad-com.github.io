{"code":0,"msg":"ok","data":{"article":{"authorCode":"admin","authorName":"孙天骁","classify":"技术类","content":"<p style=\"text-indent: 2em;\">如果想让PHP在实际环境中发挥作用，懂得PHP环境有关的知识是必不可少的。今天我就来简单的说一下PHP跟环境有关的部分。</p><p style=\"text-indent: 2em;\"><strong>一.超全局变量</strong></p><p style=\"text-indent: 2em;\">在说超全局变量之前，我先来说说全局变量和局部变量是怎么一回事。</p><p style=\"text-indent: 2em;\">·全局变量就是在函数之外声明的变量。可以在函数之外声明之下的任何地方应用这个变量。包括在循环体和判断语句内部声明的变量，只要被声明，接下来的代码都可以使用这个变量。（赋值即声明）</p><p style=\"text-indent: 2em;\">·局部变量：在函数内部声明的变量，只在本函数之内声明之后有效。局部变量还可以是类似C语言的静态变量，声明之前写上static关键字并不需要预先写好初值，函数反复调用的时候初始化的是上一次函数调用结束时该变量的值。</p><p style=\"text-indent: 2em;\">可以看出，函数内部是不可以直接使用全局变量的。如果想在函数内部使用全局变量时该怎么办呢？</p><p style=\"text-indent: 2em;\">第一种办法，利用global关键字。</p><pre class=\"brush:php;toolbar:false\">$a&nbsp;=&nbsp;1;&nbsp;$b&nbsp;=&nbsp;2;\nfunction&nbsp;sum(){\n&nbsp;&nbsp;&nbsp;global&nbsp;$a,&nbsp;$b;&nbsp;//不可以指定初值哦\n&nbsp;&nbsp;&nbsp;return&nbsp;$a&nbsp;+&nbsp;$b;\n}\necho&nbsp;sum();&nbsp;//输出3\n</pre><p style=\"text-indent: 2em;\">global关键字就可以返回全局变量的引用，进而可以在函数内部使用和修改全局变量。</p><p style=\"text-indent: 2em;\">如果不采用global关键字的话，就需要用到php的超全局变量。</p><p style=\"text-indent: 2em;\">超全局变量是PHP系统自动生成的，可以在函数内外脚本的任何地方调用的变量。</p><p style=\"text-indent: 2em;\">接下来讲一下PHP的几个常用的超全局变量：</p><p style=\"text-indent: 2em;\">（一）$GLOBALS</p><p style=\"text-indent: 2em;\">$GLOBALS存储着所有已经声明的全局变量的引用，那么上面的代码可以用$GLOBALS改写如下：</p><pre class=\"brush:php;toolbar:false\">$a&nbsp;=&nbsp;1;&nbsp;$b&nbsp;=&nbsp;2;\nfunction&nbsp;sum(){\n&nbsp;&nbsp;&nbsp;return&nbsp;$GLOBALS['a']&nbsp;+&nbsp;$GLOBALS['b'];\n}\necho&nbsp;sum();&nbsp;//输出3\n</pre><p style=\"text-indent: 2em;\">这还意味着利用$GLOBALS在函数内部创建全局变量，道理想想便知，可以看出，PHP的变量声明实际上非常灵活，比如我可以这样写：</p><pre class=\"brush:php;toolbar:false\">$a&nbsp;=&nbsp;'b';\n$b&nbsp;=&nbsp;3;\necho&nbsp;$$a;&nbsp;//输出b的值3\n</pre><p style=\"text-indent: 2em;\">同理可以用这种方式动态创建变量</p><pre class=\"brush:php;toolbar:false\">$a&nbsp;=&nbsp;'c';\n$$a&nbsp;=&nbsp;3;\necho&nbsp;$c;&nbsp;//输出3\n</pre><p style=\"text-indent: 2em;\">（二）$_COOKIE</p><p style=\"text-indent: 2em;\">$_COOKIE存储着当前请求的cookies信息，cookies是在每次http请求时都会在http头里被上传的用于标定用户信息的键值对。比如获取cookies里name的值就是$_COOKIE['name']。</p><p style=\"text-indent: 2em;\">顺便来讲一下如何向客户端保存cookies信息，需要用setcookie函数。php手册中关于setcookie函数的基本格式如下：</p><pre class=\"brush:php;toolbar:false\">bool&nbsp;setcookie&nbsp;(string&nbsp;$name&nbsp;[,&nbsp;string&nbsp;$value&nbsp;[,&nbsp;int&nbsp;$expire&nbsp;=&nbsp;0&nbsp;[,&nbsp;string&nbsp;$path&nbsp;[,&nbsp;string&nbsp;$domain&nbsp;[,&nbsp;bool&nbsp;$secure&nbsp;=&nbsp;false&nbsp;[,&nbsp;bool&nbsp;$httponly&nbsp;=&nbsp;false]]]]]])\n</pre><p style=\"text-indent: 2em;\">如果操作成功则返回true。要注意。setcookie信息是要包含在http头里的，http头是先于正文内容发送的，所以一定要在存在任何实际输出之前才可以使用这个函数。</p><p style=\"text-indent: 2em;\">header函数用于发送自定义http头，也是同样一个道理。</p><p style=\"text-indent: 2em;\">（三) $_GET和$_POST</p><p style=\"text-indent: 2em;\">顾名思义，当然是返回表单的信息。有一个好玩的地方是$_GET和$_POST的内容里有可能包含数组。我试过在前端使用jQuery post一个js数组到后端，然后这个数组被正常解析成php的数组。</p><p style=\"text-indent: 2em;\">（四）$_SESSION</p><p style=\"text-indent: 2em;\">session是为每一个用户生成一个绝不重复的sessionid，根据这个id在服务器存储与这个用户有关的信息。sessionid默认被存储在cookies里且随着浏览器关闭（会话结束）而销毁，也可以被存储在其他地方，具体请查阅手册。</p><p style=\"text-indent: 2em;\">在使用session之前需要先调用session_start()函数，这个函数没有参数。然后就可以使用$_SESSION超全局变量来存储session，通常用来存储验证码。然后就是，$_SESSION不仅可以用来存储字符串和数字，没错，数组甚至已被实例化的对象都可以存储，神奇吧。</p><p style=\"text-indent: 2em;\">（五）$_SERVER</p><p style=\"text-indent: 2em;\">这个明明才是重点！$_SERVER存储着php当前运行的所有状态信息。你可以自行print_r($_SERVER)，看到他存储着当前url，执行脚本，文件路径，客户端IP等信息。我通常常用的是：</p><pre class=\"brush:php;toolbar:false\">$_SERVER['DOCUMENT_ROOT']&nbsp;//存储着当前网站的文档根目录路径，我经常用这个为基础找文件的话说。\n$_SERVER['REMOTE_ADDR']&nbsp;//存储着客户端的IP地址\n$_SERVER['HTTP_HOST']&nbsp;//存储着当前请求的域名\n……\n</pre><p style=\"text-indent: 2em;\">（六）$_FILES</p><p style=\"text-indent: 2em;\">如果当前http请求post过来一个文件（由前端file文件域上传），这个就存储着上传的各文件临时文件的路径，具体的就不在这里说了。</p><p style=\"text-indent: 2em;\"><strong>二.PHP如何包含其他文件</strong></p><p style=\"text-indent: 2em;\">使用这四个结构，可以在文档的这个地方插入其他的php/html文件并执行。</p><pre class=\"brush:php;toolbar:false\">include&nbsp;\"123.php\";&nbsp;//从php配置文件php.ini中设置的include文件夹中先找这个文件，找不到再找当前文件夹有没有这个文件，找不到不报错\ninclude_once&nbsp;\"./123.php\";&nbsp;//从当前目录里找123.php，不过在执行之前会确认123.php是否已经被包含，如果已经包含了，就不再包含一遍了\nrequire&nbsp;\"../123.php\";&nbsp;//在父文件夹里找123.php，和include不同的是这个找不到会报错的。\nrequire_once&nbsp;$_SERVER['DOCUMENT_ROOT'].\"/123.php\";&nbsp;//如果123.php未被包含，则从网站根目录里找123.php。找不到就报错。\n</pre><p style=\"text-indent: 2em;\"><strong>三.PHP如何获得当前时间</strong></p><p style=\"text-indent: 2em;\">php时间函数的基本是时间戳，就是从1970年1月1日 0时到现在的秒数。</p><p style=\"text-indent: 2em;\">因为php的默认时区是格林威治时间，所以如果你没有改过php配置文件php.ini。那么你需要在获取时间之前调整一下当前时区。</p><pre class=\"brush:php;toolbar:false\">date_default_timezone_set(\"Asia/Shanghai\");\n</pre><p style=\"text-indent: 2em;\">最简单的，time()函数，返回当前时间戳。不接受参数。</p><p style=\"text-indent: 2em;\">mktime()函数，根据提供的时分秒月日年转换成时间戳。当省略某个参数时，就用当前时间的有关参数替代。所以不给它参数的时候，表现得和time()函数一样。</p><p style=\"text-indent: 2em;\">gettime()函数，返回一个数组形式表现的当前时间信息，接受时间戳参数，如果没给就用当前时间的时间戳。</p><p style=\"text-indent: 2em;\"><img src=\"/article/1445749050_6173.jpg\" title=\"1445749050_6173.jpg\" alt=\"搜狗截图20151025125650.jpg\"></p><p style=\"text-indent: 2em;\">但是这个函数其实用的很少，再说两个经常用到的函数。</p><p style=\"text-indent: 2em;\">date()函数，第一个参数接受时间格式的描述，第二个参数接受时间戳（默认当前时间），这个才是真正有价值的函数。</p><p style=\"text-indent: 2em;\">时间格式的描述是什么？</p><p style=\"text-indent: 2em;\"><img src=\"/article/1445749252_6993.jpg\" style=\"\" title=\"1445749252_6993.jpg\"></p><p style=\"text-indent: 2em;\"><img src=\"/article/1445749251_2676.jpg\" style=\"\" title=\"1445749251_2676.jpg\"></p><p style=\"text-indent: 2em;\">识别字母以外的字母就可以原样表示出来。如</p><pre class=\"brush:php;toolbar:false\">echo&nbsp;date('Y-m-d&nbsp;H:i:s');//返回如2015-10-25&nbsp;13:02:40\n</pre><p style=\"text-indent: 2em;\">还有一个函数，strtotime函数，很智能的一个函数，可以把你用字符串描述的日期时间转换成时间戳。第二个参数指定参考的时间戳，默认是当前时间戳。</p><pre class=\"brush:php;toolbar:false\">echo&nbsp;strtotime('2005-9-10&nbsp;13:35:43');//绝对时间，当然秒分时什么的可以不写，输出1126330543\necho&nbsp;strtotime('+5&nbsp;days');&nbsp;//相对时间，第二个参数(默认当前)的基础上加5天\n//php手册还给出了下面的例子：\necho&nbsp;&nbsp;strtotime&nbsp;(&nbsp;\"now\"&nbsp;),&nbsp;&nbsp;\"\\n\"&nbsp;;\necho&nbsp;&nbsp;strtotime&nbsp;(&nbsp;\"10&nbsp;September&nbsp;2000\"&nbsp;),&nbsp;&nbsp;\"\\n\"&nbsp;;\necho&nbsp;&nbsp;strtotime&nbsp;(&nbsp;\"+1&nbsp;day\"&nbsp;),&nbsp;&nbsp;\"\\n\"&nbsp;;\necho&nbsp;&nbsp;strtotime&nbsp;(&nbsp;\"+1&nbsp;week\"&nbsp;),&nbsp;&nbsp;\"\\n\"&nbsp;;\necho&nbsp;&nbsp;strtotime&nbsp;(&nbsp;\"+1&nbsp;week&nbsp;2&nbsp;days&nbsp;4&nbsp;hours&nbsp;2&nbsp;seconds\"&nbsp;),&nbsp;&nbsp;\"\\n\"&nbsp;;\necho&nbsp;&nbsp;strtotime&nbsp;(&nbsp;\"next&nbsp;Thursday\"&nbsp;),&nbsp;&nbsp;\"\\n\"&nbsp;;\necho&nbsp;&nbsp;strtotime&nbsp;(&nbsp;\"last&nbsp;Monday\"&nbsp;),&nbsp;&nbsp;\"\\n\"&nbsp;;\n</pre><p style=\"text-indent: 2em;\">今天就说这么多，慢慢消化吧。</p>","createTime":"2015-10-25 13:07:48","customCoverKey":"","id":93,"isGood":true,"isTop":false,"publicState":0,"replyCount":0,"state":0,"tags":["php","教程"],"title":"PHP入门（3）PHP基本语法之运行环境","urlCode":"MW35O4QEN3","viewCount":652,"viewGroup":-1,"authPassed":true},"author":{"exists":true,"name":"孙天骁","code":"admin","alias":"stx","description":"一个内心丰富的人","homepageUrl":"/u/stx","group":5,"groupName":"站长","isLocked":false,"gender":1,"avatarUrl":"/s/user/FufL-vSFO5eM1we1mxdfYHKH9tfK.jpg","realName":"孙天骁","refBaike":"","isManager":true,"isMe":true,"isLover":false,"introduction":"","joinTime":"2015-02-11 21:45:00"}}}