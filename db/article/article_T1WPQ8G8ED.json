{"code":0,"msg":"ok","data":{"article":{"authorCode":"admin","authorName":"孙天骁","classify":"技术类","content":"<p style=\"text-indent: 2em;\">PHP除了可以用面向过程的方式编程，也可以用面向对象的方式编程。</p><p style=\"text-indent: 2em;\">面向对象一直都是一门编程语言的难点，知识点非常杂。我也是仅仅做一个引导入门的概括和总结，如果有说错的地方，还望海涵。</p><p style=\"text-indent: 2em;\"><strong><span style=\"text-indent: 2em;\">一.类的定义</span></strong></p><p style=\"text-indent: 0em;\">&nbsp;&nbsp;&nbsp;&nbsp;定义类需要用到class关键字，类名可以为任何非php保留字的标识符。后面跟着一对花括号，里面包含着类的属性和方法的定义。</p><p style=\"text-indent: 2em;\">示例：</p><pre class=\"brush:php;toolbar:false\">class&nbsp;Person{\n&nbsp;&nbsp;&nbsp;&nbsp;//类的属性和方法定义\n}\n</pre><p style=\"text-indent: 2em;\">类中定义属性有三种可用权限，为Public、Protected、Private。Public在类的内外都可以被访问，Protected可以在本类和派生类的方法里访问，Private则只允许在本类的方法里访问。</p><p style=\"text-indent: 2em;\">比如：</p><pre class=\"brush:php;toolbar:false\">class&nbsp;Person{\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$name&nbsp;=&nbsp;\"小明\";&nbsp;//可以像这样指定默认值\n&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;$sex;\n&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;$age;\n}\n</pre><p style=\"text-indent: 2em;\">在类中定义常量的话，可以使用const关键字，无需变量的$标识。</p><pre class=\"brush:php;toolbar:false\">const&nbsp;author&nbsp;=&nbsp;\"孙天骁\";\n</pre><p style=\"text-indent: 2em;\"><strong>二.类的构造和析构函数</strong></p><p style=\"text-indent: 2em;\">在PHP的类中，如需定义构造和析构函数，函数名是统一的，为__construct和__destruct。像这样以两个下划线开始的方法是PHP的魔术方法。</p><p style=\"text-indent: 2em;\">示例：</p><pre class=\"brush:php;toolbar:false\">class&nbsp;Car{\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$name;\n&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;$cost;\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;__construct($name,&nbsp;$cost){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;name&nbsp;=&nbsp;$name;\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$this-&gt;cost&nbsp;=&nbsp;$cost;\n&nbsp;&nbsp;&nbsp;&nbsp;}\n&nbsp;&nbsp;&nbsp;&nbsp;\n&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;__destruct(){\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"您销毁了名叫{$this-&gt;name}的价值{$this-&gt;cost}的车。\";\n&nbsp;&nbsp;&nbsp;&nbsp;}\n}\n\n$c&nbsp;=&nbsp;new&nbsp;Car(\"中锋\",250000);\n</pre><p style=\"text-indent: 2em;\">运行结果为：您销毁了名叫中锋的价值250000的车。PHP脚本结束的时候会自动析构已经实例化的对象。</p><p style=\"text-indent: 2em;\">简单说几点：</p><p style=\"text-indent: 2em;\">(1)实例化类需要用到new关键字。</p><p style=\"text-indent: 2em;\">(2)__construct函数可以有参数，用于在实例化类的时候传入。如果无需在实例化类时传入参数，直接写$c = new Car;就好，括号可以不写。</p><p style=\"text-indent: 2em;\">(3)__destruct函数不可以有参数。</p><p style=\"text-indent: 2em;\">(4)$this是一个伪变量，指向的是当前对象。类中的函数要访问自身的属性和方法必须要用到$this。</p><p style=\"text-indent: 2em;\">(5)\"-&gt;\"是访问类的成员的运算符。还比如如果echo $c-&gt;name;会输出中锋。</p><p style=\"text-indent: 2em;\">(6)还可以通过var来声明类的属性，视为public。还可以通过$this-&gt;xxx = ...直接在类里创建属性，也视为public。</p><p style=\"text-indent: 2em;\">(7)在类中声明的函数如果不指定访问权限，默认也会是public。</p><p style=\"text-indent: 2em;\">(8)同一个类的对象即使不是同一个实例也可以互相访问对方的私有与受保护成员。</p><p style=\"text-indent: 2em;\"><strong>三.类的继承</strong></p><p style=\"text-indent: 2em;\">在php中，一个类只能继承一个基类。不可以同时继承多个基类。继承采用extends关键字。</p><p style=\"text-indent: 2em;\">比如：</p><pre class=\"brush:php;toolbar:false\">class&nbsp;Student&nbsp;extends&nbsp;Person{};\n</pre><p style=\"text-indent: 2em;\">父类必须在子类定义之前被定义。</p><p style=\"text-indent: 2em;\">另外要说明的是，如果两个类存在相同名称的属性名或方法名。比如类B继承于类A，他俩都有一个方法叫f()，那么在类B中调用$this-&gt;f()肯定调用的是B的方法f()。如果想调用A的f()需要写parent::f();或A::f();所以你可以推测出在B中如何调用A的构造函数（非必须）。在调用已实例化的B的f()时，调用的是B拥有的f()。</p><p style=\"text-indent: 2em;\">注意，如果基类的方法用final关键字修饰，则该方法无法被重写（即子类不可以存在同名函数），如果一个类被声明成final，则该类无法被继承。</p><p style=\"text-indent: 2em;\"><strong>四.抽象类</strong></p><p style=\"text-indent: 2em;\">abstract关键字修饰的类称为抽象类，一个抽象类中可以包含普通的属性和方法，但至少包含一个abstract修饰的函数（抽象方法）。抽象方法是没有函数体的，也就是没有具体实现。抽象类不可以被实例化，它存在的作用就是供其他类继承，而继承的这个派生类必须实现抽象类中各抽象函数（方法），其访问权限声明只能等于或宽松于抽象类中抽象函数的权限声明，否则会报一个致命性错误。</p><p style=\"text-indent: 2em;\">另外php还提供接口（interface），类似于一个仅包含抽象函数的抽象类。具体请查阅PHP手册。</p><p style=\"text-indent: 2em;\">php5.3以上还引入了命名空间(namespace)的概念，现在在一些较大的框架内也经常被使用，具体请查阅php手册。</p><hr><p style=\"text-indent: 2em;\">接下来，我们谈一谈PHP中错误和异常处理的一些基本知识。</p><p style=\"text-indent: 2em;\">PHP是一个很奇葩的语言，类似于很多功能的杂糅，在错误和异常处理中也可以看出这一点。</p><p style=\"text-indent: 2em;\">PHP中可能出现各种级别的错误异常，在php中央配置文件php.ini中可以是否把错误信息输出到浏览器以及将什么级别的错误信息输出到浏览器。</p><p>PHP有一组预定义常量，代表了各种错误类型。如E_PARSE错误代表语法错误。在PHP程序运行的过程中，E_ERROR代表致命性错误，出现了该错误会立刻终止脚本的执行，比如require了不存在的文件。E_WARNING代表运行时警告，比如foreach遍历了空数组，以及有一些函数在运行出错的时候可能会抛出。E_NOTICE代表运行时通知，可能是你的代码不规范，比如使用了没有声明的变量。还有其他很多类型，具体查看PHP手册，各错误类型之间可以使用按位运算符进行组合。</p><p>error_reporting函数，用于指定下面应该报告何种错误，接受的参数就是上面说的预定义常量的组合。比如：</p><pre class=\"ql-syntax\" spellcheck=\"false\">error_reporting(0);&nbsp;//不报告任何错误\nerror_reporting(E_ALL);&nbsp;//报告任何类型的错误\nerror_reporting(E_ERROR&nbsp;|&nbsp;E_WARNING);&nbsp;//只报告致命错误和警告错误\nerror_reporting(E_ALL&nbsp;^&nbsp;E_NOTICE);&nbsp;//报告所有类型的错误，除了提醒类型的错误。\n</pre><p style=\"text-indent: 2em;\">ini_set函数可以临时修改php.ini在该脚本上的作用，所以ini_set('error_reporting', E_ALL);的作用就和error_reporting(E_ALL)的作用等同。</p><p style=\"text-indent: 2em;\">其他常用的函数还有set_error_handler函数设定用户自定义的错误处理函数，error_get_last函数返回上一次错误的信息。</p><p style=\"text-indent: 2em;\">php还提供了“@”错误抑制符。如果一个表达式出错，根据当前设置本来应该往外输出错误信息，如果在表达式前面使用@的话，这个错误信息就不会输出。</p><p style=\"text-indent: 2em;\">比如@unlink($path);删除文件，文件不存在的时候不会输出错误信息。@$r = 5 / $t; 当$t为0的时候不会输出错误信息。</p><p style=\"text-indent: 2em;\"><br></p><p style=\"text-indent: 2em;\">php提供try语法结构，用于接收<strong>用户抛出的异常</strong>。异常根本上是php内置的一个类Exception。PHP手册里，对于异常类的描述如下：</p><pre class=\"brush:php;toolbar:false\">class&nbsp;&nbsp;Exception\n&nbsp;{\n&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;&nbsp;$message&nbsp;&nbsp;=&nbsp;&nbsp;'Unknown&nbsp;exception'&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;异常信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;&nbsp;$code&nbsp;&nbsp;=&nbsp;&nbsp;0&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;用户自定义异常代码\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;&nbsp;$file&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;发生异常的文件名\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;protected&nbsp;&nbsp;$line&nbsp;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;发生异常的代码行号\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;&nbsp;__construct&nbsp;(&nbsp;$message&nbsp;&nbsp;=&nbsp;&nbsp;null&nbsp;,&nbsp;&nbsp;$code&nbsp;&nbsp;=&nbsp;&nbsp;0&nbsp;);\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;function&nbsp;&nbsp;getMessage&nbsp;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;返回异常信息\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;function&nbsp;&nbsp;getCode&nbsp;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;返回异常代码\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;function&nbsp;&nbsp;getFile&nbsp;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;返回发生异常的文件名\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;function&nbsp;&nbsp;getLine&nbsp;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;返回发生异常的代码行号\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;function&nbsp;&nbsp;getTrace&nbsp;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;backtrace()&nbsp;数组\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final&nbsp;function&nbsp;&nbsp;getTraceAsString&nbsp;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;已格成化成字符串的&nbsp;getTrace()&nbsp;信息\n\n&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;可重载的方法&nbsp;*/\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;&nbsp;__toString&nbsp;();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;可输出的字符串（魔术方法__toString用来指定该类的对象被echo时应该输出什么，必须返回一个字符串）\n&nbsp;}\n</pre><p style=\"text-indent: 2em;\">所以，用户想要抛出一个异常的话，利用throw关键字，可以这样写：</p><pre class=\"brush:php;toolbar:false\">throw&nbsp;new&nbsp;Exception(\"xxx发生了错误\");\n</pre><p style=\"text-indent: 2em;\">比如在try语句中可以这样写：</p><pre class=\"brush:php;toolbar:false\">try{\n&nbsp;&nbsp;&nbsp;&nbsp;//do&nbsp;something\n&nbsp;&nbsp;&nbsp;&nbsp;throw&nbsp;new&nbsp;Exception(\"不可以xxx\");&nbsp;//满足某些条件时，抛出异常\n&nbsp;&nbsp;&nbsp;&nbsp;//do&nbsp;something\n}catch(Exception&nbsp;$e){\n&nbsp;&nbsp;&nbsp;&nbsp;echo&nbsp;\"错误：\".$e-&gt;getMessage();\n}\n</pre><p style=\"text-indent: 2em;\">可以新建一个自己的异常类，继承于Exception类。那么在catch的时候，可以使用自己的异常类。在这个异常类中，你可以写一些你自定义的属性和方法，也可以不写，比如：</p><pre class=\"brush:php;toolbar:false\">class&nbsp;myException&nbsp;extends&nbsp;Exception{\n&nbsp;&nbsp;//给系统默认的Exception一些参数。当然也可以不给，那么getMessage()等方法就获取不到内容了。\n&nbsp;&nbsp;function&nbsp;__construct($msg&nbsp;=&nbsp;null,&nbsp;$code&nbsp;=&nbsp;0){\n&nbsp;&nbsp;&nbsp;&nbsp;parent::__construct($msg,&nbsp;$code);\n&nbsp;&nbsp;}\n&nbsp;&nbsp;//这里可以写一些自定义的方法和函数\n}\n</pre><p style=\"text-indent: 2em;\">然后在try语句块里，便可以catch一个myException的分支。</p><pre class=\"brush:php;toolbar:false\">try{\n&nbsp;&nbsp;//do&nbsp;something\n&nbsp;&nbsp;//抛出异常，比如throw&nbsp;new&nbsp;myException('Error',10);\n}catch(myException&nbsp;$e){\n&nbsp;&nbsp;//do&nbsp;something\n}catch(Exception&nbsp;$e){\n&nbsp;&nbsp;//do&nbsp;something&nbsp;//别忘了try可以有多个catch分支，就类似我这样写，就可以让try捕获各种类型的异常了。\n}\n</pre><p style=\"text-indent: 2em;\">嗯。今天就说到这里了。至此php的基本语法大致就被我给说完了，改天我还可能跟初学者分享一下我在实际写项目时的一些经验。</p>","createTime":"2015-11-01 19:24:52","customCoverKey":"","id":96,"isGood":true,"isTop":false,"publicState":0,"replyCount":0,"state":0,"tags":["php","教程"],"title":"PHP入门（5）PHP基本语法之面向对象和错误处理","urlCode":"T1WPQ8G8ED","viewCount":760,"viewGroup":-1,"authPassed":true},"author":{"exists":true,"name":"孙天骁","code":"admin","alias":"stx","description":"一个内心丰富的人","homepageUrl":"/u/stx","group":5,"groupName":"站长","isLocked":false,"gender":1,"avatarUrl":"/s/user/FufL-vSFO5eM1we1mxdfYHKH9tfK.jpg","realName":"孙天骁","refBaike":"","isManager":true,"isMe":true,"isLover":false,"introduction":"","joinTime":"2015-02-11 21:45:00"}}}