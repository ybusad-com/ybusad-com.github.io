{"code":0,"msg":"ok","data":{"article":{"authorCode":"admin","authorName":"孙天骁","classify":"技术类","content":"<p class=\"ql-align-justify\"><img src=\"/article/fa10c7e2111515963b.jpg\"></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\">\t\t在今年的六月底，我成功将个人网站“骁之屋”的崭新架构上线。我在网站和公众号上发表了一篇叫做《<a href=\"/a/U8OJL3LTUN.htm\" rel=\"noopener noreferrer\" target=\"_blank\">光辉号骁之屋首批代码正式上线！</a>》的文章，文章里详细解释了目前骁之屋的技术架构，我正在做和已经做了什么样的探索和尝试​。上面提到了，在随后“光辉号”骁之屋的前端开发中，我比较倾向于<strong>自己实现和开源一套属于自己的UI​组件库</strong>。经过3个多月的准备，今天我终于可以给​大家分享一下我目前的进展。</p><p class=\"ql-align-justify\">\t\t在详细介绍之前，我还是先给初次见面的​伙伴介绍一下什么是骁之屋。“骁之屋”是我为我完全自研的个人网站所起的名字。它不是一个单纯的博客网站，它是以随记为核心，将我的生活和互联网不断融合和服务的充满个性的​个人网站。在网站建设近8年的时间里，据粗略统计，上线运行的属于骁之屋的代码超过20万行​。在技术上，开发个人网站让我不断得到锻炼的机会​；在生活上，个人网站是一个他人了解和接触我的窗口，也是我记录梳理我生活的​重要工具​。个人网站是我实现个人价值的​重要方式。</p><p class=\"ql-align-justify\">\t\t距离我提出全新架构的“光辉号”骁之屋的设想，已经有了一年多的时间​。那个时候我说，光辉号骁之屋的前端会使用&nbsp;Vue3 + TS 重构，会和现有的、基于 Vue2 的骁之屋前端做逐步的衔接和替换，完成这一次我的个人网站有史以来最大的架构/技术栈变动。Vue3 的消息应该两年前就渐渐披露了，Vue 的作者尤雨溪说，Vue3 将基于 Proxy 实现响应式，提供解耦和更灵活组合的&nbsp;API 供开发者调用​。并且由于使用 TypeScript&nbsp;构建，Vue3&nbsp;会拥有更好的 TS 支持​。在今年的7月18日，Vue3的第一个 Release Candidate 版本发布，那时候，我发觉时机已到，我已经可以使用 Vue3 准备“光辉号”骁之屋的前端了​。</p><p class=\"ql-align-justify\">\t\t为了能够比较快的熟悉起&nbsp;Vue3&nbsp;的语法和新特性，我详细阅读了 Vue 的 RFC 文档，​也在公司组内做了分享。我在&nbsp;Github 上新建了我第一个正儿八经不停提交代码和维护的仓库，开始了如何搭建组件库的​尝试。我之前对于怎么搭组件库也没有经验，从​Webpack配置开始搞起。还好 Vue 官方提供了一个&nbsp;vue-next-webpack-preview 的示例仓库，用于搭建起一个最小的支持 Vue3 的 Webpack 配置。我抄着这个配置搭建起来我的项目，​并逐渐在配置上添加自己的东西。Vue3 的项目就可以跑起来了。</p><p class=\"ql-align-justify\">\t\t在实践中，我发现&nbsp;Vue&nbsp;的单文件组件语法（.vue）对于 TS 的支持并不是很好​。同时为了更好的代码灵活性，我意识到了，TSX&nbsp;是我优雅地撰写 Vue3 代码的​唯一方式。我们通常在写 React 的时候使用&nbsp;TSX（React 也没有比较好的不使用&nbsp;JSX/TSX&nbsp;的方式），但在 Vue 中使用 TSX，我也是第一次尝试。先从简单的组件入手，如&nbsp;Button&nbsp;和 Input 开始，我在实践中学习和熟悉着 Vue3。使用&nbsp;@vue/babel-plugin-jsx&nbsp;这个&nbsp;JSX 插件，配合&nbsp;Vue3 的组合式 API，我发现用&nbsp;TSX&nbsp;写 Vue3 是​很愉快的方式。只不过一些 Vue&nbsp;模板语法里可以使用的一些指令或者写法，使用 TSX​ 的话就需要想办法用别的方式实现。我投入了充分的探索欲和热情​去学习和思考，在实现了几个组件之后，我开始把它介绍给几个前端同事，询问他们是否有兴趣参与。</p><p class=\"ql-align-justify\">\t\t有一个前端同事提到，目前我的组件库没有文档，文档是协作者和使用者都需要去翻阅的东西​。我当然认同，并且以后组件一多，我也需要去读文档才能想起其中的一些用法，总不能每次都去看源码吧。可是怎么搭建​文档站点呢？Vue3 的生态才刚刚开始，我从哪里寻找适合&nbsp;Vue3&nbsp;​的文档生成器呢？在 Vue2 时代，我们有&nbsp;VuePress 可用，在&nbsp;Vue3&nbsp;生态里，是否已经有了​替代品呢？</p><p class=\"ql-align-justify\">\t\t通过不断地翻阅 Github 和技术博客，​我惊喜地发现，还真有这样一个项目！它叫做 VitePress，是基于 Vite&nbsp;的&nbsp;​Markdown 文档生成器。Vite 其实之前已经比较耳熟，它是基于浏览器原生&nbsp;ES Module&nbsp;能力实现的一个支持真正的按需加载的&nbsp;V​ue3 开发工具。用它​来发展文档工具确实是再适合不过了。但&nbsp;VitePress 才刚刚起步，功能和稳定性相较​ VuePress 还是有较大差距。我应该也是最早一批​吃螃蟹的人了吧。首先，VitePress 还没有提供&nbsp;components 这样的文件夹可以存放自定义组件，我该怎样将自己的自定义组件渲染到 VitePress 的文档上呢？我通过翻阅文档和源码发现，VitePress 自定义主题里提供了一个&nbsp;enhanceApp&nbsp;的方法，暴露了一个文档 Vue3 实例的 app，那我不就可以在这个&nbsp;app 上注册​我的自定义组件了嘛。于是我新建了一个自定义主题，但继承于 VitePress 的默认主题，修改它的 enhanceApp，就把我组件库里的组件和文档示例需要的组件​挂载了上去。</p><p class=\"ql-align-justify\">\t\t这样一步一步，文档终于有形状了。而且我可以在文档上直接调试​我的组件。Vite 确实是很迅速的东西，基本上是我刚保存代码，浏览器​立刻就更新了。​如果头转得慢一点，就看不到它更新的过程了。​接下来的问题是，我怎么部署我的文档站点？VitePress 提供了打包命令，它可以把你写好的 Markdown&nbsp;用&nbsp;Server-Side Rendering&nbsp;的方式生成&nbsp;html 和依赖的脚本样式​。那我就部署在一个静态网站上就可以了。​可以部署在哪里最方便快捷呢？</p><p class=\"ql-align-justify\">\t\t我首先想到了 Github Pages，但是 Github Pages 似乎对生成的文档目录有比较严格的要求，我是把我生成的文档打包结果放在一个单独的分支下，还是另外一个仓库？无论怎样似乎都不太优雅​。而且感觉 Github Pages 也不太方便​绑定自己的域名。​因此我放弃了使用 Github Pages 部署。我又将目光投向了 Coding.net 的静态网站部署能力，因为我的仓库除了托管在 Github 上​，也托管在 Coding.net 上，某种意义上也是蛮方便的。然后我发现 Coding.net 也做不到托管某个文件夹下的文件，只能再新建一个仓库​专门用来存放打包后的文档。配置好静态网站功能后，我只要推送代码，它就会自动部署，很快我就能在​线上看到最新的文档。</p><p class=\"ql-align-justify\">\t\t经过一段时间的使用之后，我总结了两个使用&nbsp;​Coding.net 托管静态网站的大问题：（1）我需要手动把​打包结果从这个仓库复制到那个仓库，然后提交。虽然我考虑过编写脚本简化这一操作，但是我​觉得这脚本不通用。（2）它的服务器似乎在境外，访问速度特别慢。在公司的网络​里，经常卡了半天才能加载出文档。​有没有更好的托管文档的方式呢？我想到了用&nbsp;docker，反正我还有闲置的服务器，不如我用 docker&nbsp;搭一个&nbsp;node&nbsp;​静态网站服务器，托管我的文档？我可以实现一个命令自动在服务器上​打包和部署文档这样多好。说干就干，我写好了需要的 dockerfile 和&nbsp;Makefile，但很快​，我又遇到了新的问题。</p><p class=\"ql-align-justify\">\t\t这个新的问题似乎是 Vue3&nbsp;的 bug 吧​。我其实早一点就发现了，我在我的组件库里使用了 Vue3 新提供的&nbsp;Teleport 内置组件，是一个可以把其中的元素根据选择器挪到相应位置的很好用的组件​。但是呢，我&nbsp;vitepress build 的时候，惊奇地发现&nbsp;vitepress 依赖的 @vue/server-renderer&nbsp;里一个叫做&nbsp;renderVNodeChildren 的​方法报错了。。后面我也感觉到了，这个 SSR&nbsp;对 Teleport 的支持真的是有问题​。因为我也不清楚具体问题的原理，我不得不去本地&nbsp;node_modules 里手动改下这里的代码，兼容下 children&nbsp;​不存在的情况，好让文档打包得以继续。但这样子的话，我就实现不了在服务器上自动打包文档了呀​。我总不能去服务器上修改 node_modules 的文档吧。想想以后&nbsp;Vue3 能修复就好了​。​我就先不考虑把文档部署在自己的服务器上了。</p><p class=\"ql-align-justify\">\t\t我后面又翻了 VuePress 的文档，它推荐了一个部署方式就是借助腾讯云的 Cloudbase，通过安装 Cloudbase 的 Cli，就可以很方便在本地实现文档的上传然后部署到腾讯云提供的静态网站托管服务上​。​而且腾讯的服务器在国内，访问速度很快。但我又遇到一个问题，我发现腾讯云的静态网站托管服务它响应头没有提供编码信息，导致我部署上去的文档，加载出来居然是乱码​。。这也是因为我 VitePress&nbsp;的打包结果 html 没有携带 charset 这个&nbsp;​meta 头吧。然后我给 VitePress 提了一个 issue，然后 VitePress 在 0.6.0 这个版本里修复了这个问题，后面我就使用 Cloudbase 来部署我的​文档站点了。</p><p class=\"ql-align-justify\">\t\t回到我的组件库开发中，组件库的设计也要能切合我网站的设计，所以组件库整体是借鉴&nbsp;Bootstrap 的 UI 设计吧。准确地说我是借鉴了一个叫做 Flatly 的 Bootswatch​ 主题。API 设计上我主要借鉴了 uiv、at-ui，​以及 Zent。​当然还是自己的想法最重要啦，因为时间和精力关系，其中的一些组件的功能还比较简单，但是我觉得目前已经实现的 API 还是比较好用的。我拉了几个同事参与我组件库的贡献，​他们有的很够意思，甚至把维护组件库写在了自己的 OKR里。虽然到后面他们贡献的代码还是很少（大家都很忙，是吧）​，但是还是十分感谢他们啦。</p><p class=\"ql-align-justify\">\t\t到了如今，我的组件库已经有了接近&nbsp;30 个原创组件，涵盖了一些基本的、表单的、​浮层对话框之类的。在组件库开发的中后期，我慢慢地投入时间基于我的组件库开发光辉号骁之屋的新版文章系统，在实践中​不断优化和完善我的组件库。在这个过程中，我充实了自己，也取得了​比较满意的成果。</p><p class=\"ql-align-justify\">\t\t我要准备给我的组件库发第一个正式版了（之前都是 Alpha 或 Beta），我知道我的组件库还是有很多不足的地方，比如过于依赖比较现代的 API，没有实现按需加载，也没有撰写单元测试​。希望以后大家也能一起帮我补齐呢​。虽然它现在设计成供我的个人网站使用，但说不定有一天它也能小有名气，被更多人发现和使用呢。</p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\">\t\t我的组件库叫 splendor-ui​。</p><p class=\"ql-align-justify\">\t\t​Github 开源地址是：<a href=\"https://github.com/sunkint/splendor-ui\" rel=\"noopener noreferrer\" target=\"_blank\">https://github.com/sunkint/splendor-ui</a></p><p class=\"ql-align-justify\">\t\t文档​地址是：<a href=\"https://splendor-ui.ybusad.com\" rel=\"noopener noreferrer\" target=\"_blank\">https://splendor-ui.ybusad.com</a></p><p class=\"ql-align-justify\"><br></p><p class=\"ql-align-justify\">\t\t最后的最后</p><p class=\"ql-align-justify\">\t\t我在准备“光辉号”骁之屋首批前端代码 - 文章系统的上线了，快的话，预计几天之后它就可以趁我网站八周年之际上线了​。​敬请期待哦。</p><p class=\"ql-align-justify\"><br></p><p>\t\t<span style=\"background-color: rgb(255, 255, 204);\">END</span></p>","createTime":"2020-11-08 18:16:40","customCoverKey":"","id":274,"isGood":true,"isTop":false,"publicState":0,"replyCount":0,"state":0,"tags":[],"title":"三个月时间，打造一款自己的前端组件库","urlCode":"VGZ6KS6IJJ","viewCount":1067,"viewGroup":-1,"authPassed":true},"author":{"exists":true,"name":"孙天骁","code":"admin","alias":"stx","description":"一个内心丰富的人","homepageUrl":"/u/stx","group":5,"groupName":"站长","isLocked":false,"gender":1,"avatarUrl":"/s/user/FufL-vSFO5eM1we1mxdfYHKH9tfK.jpg","realName":"孙天骁","refBaike":"","isManager":true,"isMe":true,"isLover":false,"introduction":"","joinTime":"2015-02-11 21:45:00"}}}