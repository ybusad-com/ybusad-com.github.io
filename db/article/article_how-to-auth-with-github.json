{"code":0,"msg":"ok","data":{"article":{"authorCode":"admin","authorName":"孙天骁","classify":"技术类","content":"<h2>〇. 前言</h2><p><br></p><p>骁之屋的用户系统已经接近7年的历史，支持第三方登录一直是我对用户系统未来的一个期望。在光辉号骁之屋的重构进程中，我终于有了时间和机会去尝试做这个事情。那么，我就先从比较容易接入的 Github 登录做起，来总结一下我的实践经验吧。</p><p><br></p><h2>一. 整体流程</h2><p><br></p><ol><li>在 Github 上注册 OAuth 应用，获得 Client ID 和 Client Secret 备用。</li><li>使用 Client ID 和 redirect_url 做参数将用户带领到 Github 授权页进行授权（若已经授权过，会直接进入3）。</li><li>授权之后，Github 会携带 code 跳转置顶的 redirect_url。</li><li>使用 code 向 Github 换取 access token</li><li>使用 access token 向 Github 换取用户的公开资料</li><li>使用 Github 用户的 id 和资料创建网站用户，并建立关联关系</li></ol><p><br></p><h2>二. 在 Github 上登记应用</h2><p><br></p><p>\t\t登录 Github 之后，选择 Settings - Developer settings - OAuth Apps，点击 New Auth Apps，在如下网址：</p><p>\t\t<a href=\"https://github.com/settings/applications/new\" target=\"_blank\">https://github.com/settings/applications/new</a></p><p>\t\t这个页面会让你填写 4 项基本信息，你的应用名（Application Name），你的应用描述（<span style=\"color:rgb(36, 41, 46);\">Application description</span>），你的网站首页（<span style=\"color:rgb(36, 41, 46);\">Homepage URL</span>），你的网站回调地址（<span style=\"color:rgb(36, 41, 46);\">Authorization callback URL</span>）。</p><p>\t\t创建之后，进入你的应用详情，可继续编辑你的应用 Logo 等信息，并获得 Client ID。然后操作生成 Client Secret，这是你的应用的重要私密凭据，切记不能让它出现在前端中。只能由服务器端妥善保管。</p><p><br></p><p><img src=\"/article/503b8c8f81ad71c639.jpg\"></p><p><br></p><h2>三. 进入授权流程</h2><p><br></p><p>\t\t接着查看 Github 开发文档。Github 提供了一个授权页面（https://github.com/login/oauth/authorize），需要在这个 url 中拼上 client_id（必须）和 redirect_uri 参数。如果 redirect_uri 参数未指定，则会使用你登记应用时填写的 callback url。如果指定，则必须指定和 callback url 相同域名和端口的路径。另外也可以指定 scope 参数来表明申请哪些权限，如果只需要获取用户公开信息的权限，scope就不需要填写。还可以指定一个 state 参数，为一个随机字符串。这样下一步授权完成回调的时候，就可以检查回调过来的 state 参数是否一致来防止 csrf 攻击。</p><p>\t\tGithub 检查参数正确之后，就会进入授权页要求用户授权。如果用户已经授权过，就会直接进入回调。否则会弹出一个授权界面，授权成功后携带 code 和 state query 参数跳转你指定的回调地址。code 是一个10分钟有效的临时身份码。使用 code 可以换取一个 access token（相当于用户的一个密码），通过这个 token 就可以在用户授权的范围内调用 Github 接口进行下一步操作。</p><p><img src=\"/article/17ad0a205e4464279e.jpg\"></p><h2>四. 使用 code 换取 access token </h2><p><br></p><p>\t\tGithub 提供了一个接口：https://github.com/login/oauth/access_token，给这个接口发送一个 POST 请求携带上一步获得的 code 参数以及应用的 client_id 和 client_secret 信息，注意你需要在请求头上指定 Accept: application/json 来确保返回格式是易于解析的 JSON。它的返回结果类似如下：</p><pre>{\"access_token\":\"gho_16C7e42F292c6912E7710c838347Ae178B4a\", \"scope\":\"repo,gist\", \"token_type\":\"bearer\"}\n</pre><p><br></p><h2>五. 使用 access token 换取用户 Github 公开信息</h2><p><br></p><p>\t\tGithub 获取用户信息的接口是 https://api.github.com/user（详见<a href=\"https://docs.github.com/en/rest/reference/users\" target=\"_blank\">https://docs.github.com/en/rest/reference/users</a>），注意你需要携带一个自定义请求头 Authorization ，内容是 token &lt;你的access token&gt;，会给你返回 JSON 格式的用户信息参数。</p><p><br></p><p>\t\t获取 accessToken 和 userInfo 的代码实现如下：</p><pre>const axios = require('axios');\n\nclass GithubAuthClient {\n  constructor(app) {\n    this.githubAuthConfig = app.getConfig('githubAuth');\n  }\n\n  async getAccessTokenByCode(code) {\n    const result = await axios({\n      url: 'https://github.com/login/oauth/access_token',\n      method: 'post',\n      headers: { 'Content-type': 'application/json', Accept: 'application/json' },\n      data: {\n        client_id: this.githubAuthConfig.clientID,\n        client_secret: this.githubAuthConfig.clientSecret,\n        code,\n      },\n    });\n    return result.data.access_token;\n  }\n\n  async getUserInfo(accessToken) {\n    if (!accessToken) {\n      throw new Error('accessToken 无效');\n    }\n    const result = await axios({\n      url: 'https://api.github.com/user',\n      method: 'get',\n      headers: {\n        Authorization: 'token ' + accessToken,\n      },\n    });\n    return result.data;\n  }\n}\n\nmodule.exports = GithubAuthClient;\n</pre><p><br></p><h2>六. 使用用户 Github 信息创建用户</h2><p><br></p><p>\t\t在这里我使用了一个新的表：xzw_github_user，用于存储用户的 Github 用户信息。其中包括了用户在 github 上的 id，我把它存为 github_id。每次获取到 github_id 时，我会首先检查表内有没有该用户的信息，若没有，则表明这是一个新用户。遂我引导前端进入一个简易的注册页。这个注册页只需要确认用户名，因为用户名一旦确认，在我目前的技术架构上是很难修改的。同时也是担心 Github 用户名会和网站已有的用户名冲突。确认之后会在用户表内创建一个新用户，并用 github_id 字段记录两条记录的对应关系。如果这个用户已经授权注册过了。下次我就可以直接通过 github_id 的字段查询到相应的用户记录，并进行自动登录。</p><p><img src=\"/article/75368efa19cba9dd5c.jpg\"></p><h2>七. 其他</h2><p><br></p><p>\t\t之所以说 Github 的授权比较简单，是因为 Github 是个开发者都可以去新建应用去做。而不像接入国内的一些主流平台，需要进行实名认证等繁琐步骤。甚至来说个人开发者可能是无法申请的，必须背靠一个公司的身份才行。</p><p>\t\t上述方式通过 Github 创建的用户是无法进行密码登录的。后面需要在个人中心提供一个设置密码的选项，这样用户在小程序之类的还不支持 Github 登录的场景，就可以使用密码登录了。</p>","createTime":"2021-06-01 15:48:23","customCoverKey":"","id":293,"isGood":true,"isTop":false,"publicState":0,"replyCount":0,"state":0,"tags":["网站开发","光辉号","用户系统"],"title":"Github OAuth 用户登录接入探索","urlCode":"how-to-auth-with-github","viewCount":539,"viewGroup":-1,"authPassed":true},"author":{"exists":true,"name":"孙天骁","code":"admin","alias":"stx","description":"一个内心丰富的人","homepageUrl":"/u/stx","group":5,"groupName":"站长","isLocked":false,"gender":1,"avatarUrl":"/s/user/FufL-vSFO5eM1we1mxdfYHKH9tfK.jpg","realName":"孙天骁","refBaike":"","isManager":true,"isMe":true,"isLover":false,"introduction":"","joinTime":"2015-02-11 21:45:00"}}}